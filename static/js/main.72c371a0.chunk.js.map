{"version":3,"sources":["data.js","Detail.js","App.js","reportWebVitals.js","index.js"],"names":["id","title","content","price","박스","styled","div","제목","h4","props","색상","React","Component","Info","재고","Detail","useState","alert","alertStete","inputData","inputDataState","useEffect","timer","setTimeout","console","log","clearTimeout","useParams","findingShoe","shoes","find","product","history","useHistory","className","onChange","e","target","value","src","width","onClick","재고변경","goBack","Card","index","shoe","App","Data","shoesState","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","as","to","NavDropdown","Item","Divider","exact","path","Jumbotron","Button","variant","map","axios","post","pw","then","reuslt","catch","get","result","data","fetch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72c371a0.chunk.js","sourcesContent":["export default [\n    {\n      id : 0,\n      title : \"White and Black\",\n      content : \"Born in France\",\n      price : \"$120\"\n    },\n  \n    {\n      id : 1,\n      title : \"Red Knit\",\n      content : \"Born in Seoul\",\n      price : \"$110\"\n    },\n  \n    {\n      id : 2,\n      title : \"Grey Yordan\",\n      content : \"Born in the States\",\n      price : \"$130\"\n    }\n  ] ","import React, {useEffect, useState} from 'react';\n//React Hook을 통해 component lifecycle 중간중간에 뭔가 명령을 줄 수 있음\n//어떤거 하기전에 hook을 걸어 이것 좀 미리 해줘, 나중에 뭐 좀 해줘 같은 것이다\nimport { useHistory, useParams } from 'react-router';\n\n//Used Sass styling\n//yarn add node-sass\nimport './Detail.scss';\n\n//Used Styled Componenets\n//Styled-Components는 JSX와 혼연일체 된 CSS임. CSS파일 너무 많아지는걸 방지하기위해 씀\nimport styled from 'styled-components';\nimport axios from 'axios';\n\n//컴포넌트에 직접 스타일 넣어서 스타일링하기\n//CSS를 미리 입혀놓은 box라는 컴포넌트를 만드는거임.\nlet 박스 = styled.div`\n    padding : 20px;\n`;\n//백틱안에서 변수를 쓸경우 ${} 이렇게 씀\nlet 제목 = styled.h4`\n    font-size : 25px;\n    color : ${props => props.색상}\n`;\n\n//옛날 스타일 방식, 하지만 현재에도 써서 알아둬야함. 더 쉬운건 아래 useEffect hook 봐보기\n//이 두개가 가장 자주쓰이는 LifeCycle hook임.\nclass Detail2 extends React.Component {\n    //Detail2 component가 mount(등장) 되었을때 실행할 코드~\n    componentDidMount() {\n        //Ajax 같은것도 이런곳에 자주 사용\n        \n    }\n\n    //Detail2 component가 unMount(내시야에서 사라질때, 안보일때) 되었을때 실행할 코드~\n    componentWillUnmount() {\n\n    }\n}\n\n\n\n\nfunction Detail(props) {\n\n    let [alert, alertStete] = useState(true);\n    let [inputData, inputDataState] = useState('');\n\n    //useEffect hook 은 위의 LifeCycle hook과 비슷함\n    //Component가 mount되엇을때 실행됌\n    //Component가 update 될때도 실행됌\n    //useEffect를 여러개 만들어서 사용해도 됌. 위에서부터 순서대로 실행됌\n    //Optional parameter: 마지막 파라미터에 [alert] 라는 특정 state가 변경될때만 코드를 실행해 달라는 말임\n    //[alert, inputData] 같이 [] 안에 여러개 들어가도 됌\n    //만약 마지막 파라미터에 [] 가 들어있다면, 아무것도 없는 공허한 state가 변경될때만 코드를 실행하라는 말이므로 영영 실행안됌\n    //즉 마지막 파리미터에 []를 넣으면, Detail컴포넌트가 등장시 한번만 실행하고 더이상 영영 실행안됌\n    useEffect(()=>{\n\n        //2초 후에 \"재고가 얼마 남지 않았습니다\" alert창을 안보이게 하기\n        let timer = setTimeout( ()=>{alertStete(false)}, 2000 )\n        console.log(\"useEffect is runned\");\n\n        //이 코드는 Detail Component 가 Unmount될때 실행을 해줌\n        //Detail Component가 사라질때 timer을 제거해줌\n        //setTimeout에서 버그가 생길 수도 있어서 이거 해주면 좋음!\n        return ()=>{ clearTimeout(timer) }\n    }, [alert]);\n    //alert는 현재 \"재고가 얼마 남지 않았습니다\" UI가 보여지는지 안보여지는지를 저장하는 변수임\n    \n\n    //useParams라는 hook을 이용해서 url의 parameter를 가져옴\n    //useParams는 {사용자가 입력한 URL 파라미터들} 을 리턴해줌\n    //우리는 <Route path=\"/detail/:id\"> 에서 :id 자리의 값을 id라는 변수에 담을거임\n    let {id} = useParams(); \n\n    let findingShoe = props.shoes.find((product)=>{\n        return product.id == id\n    })\n\n    //뒤로가기 하기 위해 useHistory라는 hook을 이용함\n    //방문기록 등을 저장해놓은 object를 history 변수 안에 넣음\n    let history = useHistory();\n\n    return (\n        <div className=\"container\">\n            <박스>\n                <제목 색상={'blue'}>Detail Page</제목>\n                <제목 className=\"red\">Detail Page</제목>\n            </박스>\n\n            {/* 이렇게 inputData가 바뀔때마다 Detail Component가 update(재렌더링) 됌 */}\n            {inputData}\n            <input onChange={(e)=>{ inputDataState( e.target.value ) }}/>\n\n            { //항상 켜놓는 UI가 아니라면 boolean state를 만들어서 이런식으로 UI를 만든다고함\n                alert === true \n                ? (<div className=\"my-alert2\">\n                        <p>\n                            재고가 얼마 남지 않았습니다\n                        </p>\n                    </div>)\n                : null\n            }\n\n\n\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" />\n                </div>\n                <div className=\"col-md-6 mt-4\">\n                    <h4 className=\"pt-5\">{findingShoe.title}</h4>\n                    <p>{findingShoe.content}</p>\n                    <p>{findingShoe.price}</p>\n\n\n                    {/* 재고를 보여줌 */}\n                    <Info 재고={props.재고}></Info>\n\n\n\n                    <button className=\"btn btn-danger\" onClick={()=>{props.재고변경([9,11,12])}}>주문하기</button> \n                    <button className=\"btn btn-danger\" onClick={()=>{\n                        //React Router의 useHistory() 의 goBack()을 이용함. 말그대로 이전 페이지로 감\n                        history.goBack();\n                        //push(\"/ㅁㄴㅁㄴ\") 는 localhost:3000/ㅁㄴㅁㄴ 경로로 이동시켜줌\n                        //history.push(\"/ㅁㄴㅁㄴ\")\n                    }}>뒤로가기</button> \n                </div>\n            </div>\n        </div> \n    )\n    \n}\n\nfunction Info(props) {\n    return (\n        <p>Inventory: {props.재고[0]}</p>\n    )\n}\n\n\n\nexport default Detail;","//Used React Bootstrap\nimport {useState} from 'react';\nimport { Navbar, Nav, NavDropdown, Button, Jumbotron } from 'react-bootstrap';\nimport './App.css';\n\nimport Data from './data.js';\nimport DetailPage from './Detail.js';\n\nimport { Link, Route, Switch } from 'react-router-dom';\n//Used axios Ajax\nimport axios from 'axios';\n\nfunction App() {\n\n  let [shoes, shoesState] = useState(Data);\n  let [재고, 재고변경] = useState([10, 11, 12]);\n\n  return (\n    <div className=\"App\">\n      \n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"#home\">ShoeShop</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n\n          {/* mr-auto를 ml-auto로 바꾸면 바의 옵션들이 오른쪽으로 갈거임 */}\n          <Nav className=\"mr-auto\"> \n            {/* React Router 문법 (페이지 이동하는 버튼 만들기)\n            <Link to=\"경로\">버튼</Link> \n            \n            BootStrap에서 가져온거랑 다르게 좀 수정함. Warning 떠서 Link 컴포넌트는 아래같이 없앰*/}\n            <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\n            <Nav.Link as={Link} to=\"/detail\">Detail</Nav.Link>\n\n            <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n\n        </Navbar.Collapse>\n      </Navbar>\n\n      \n      {/* Swtich Router안에 담으면 Route들이 하나씩만 보임\n      중복 페이지 보여주는걸 막아줌. 만약 Route들이 중복이 되면, 제일 위에 Route만 보여줌 */}\n      <Switch>\n\n        {/* Routing은 페이지를 나눌때 쓰임. Routing하면 뒤로가기 앞으로가기 버튼도 쓸 수 있음*/}\n        {/* 주소창에 localhost:3000 치면 가는 페이지 만듦 */}\n        {/* exact path=\"/\" 에서 exact를 안넣어주면 / 가 붙은 모든 경로에 메인페이지가 중복되어서 나옴 */}\n        {/* exact는 정확히 localhost:3000 일때만 \"메인페이지에요\" 가 보여짐 */}\n        <Route exact path=\"/\">\n\n          <Jumbotron className=\"background\">\n            <h1>20% Season OFF!</h1>\n            <p>\n              This is a simple hero unit, a simple jumbotron-style component for calling\n              extra attention to featured content or information.\n            </p>\n            <p>\n              <Button variant=\"primary\">Learn more</Button>\n            </p>\n          </Jumbotron>\n\n          {/* Bootstrap문법으로 사이트를 3등분 하기 */}\n          {/* className에 container를 쓰면 좌우 여백을 예쁘게 잡아줌 */}\n          <div className=\"container\">\n            {/* row를 쓰면 사이트를 12개의 column으로 쪼갠다는 의미임 */}\n            <div className=\"row\">\n              {\n                shoes.map((shoe, index)=>{\n                  return <Card shoe={shoes[index]} index={index} key={index}/>\n                })\n              }\n            </div>\n\n\n              {/* //서버요청 종류:\n              //Get Request: 특정페이지/ 자료읽기. 주소창에 url 입력하고 페이지 받는 것 같은것\n              //Post Request: 서버로 중요 정보를 전달할때 씀. 로그인할때 특정 칸에 아이디, 비번 입력하고 특정 로그인 버튼 누르는 것\n\n              //Ajax란 서버에 새로고침 없이 Request를 할 수 있게 도와줌 \n              Ajax 방법:\n              1. jQuery 설치해서 $.ajax()쓰기\n              2. axios 설치해서 axios.get()쓰기\n              3. 쌩 자바스크립트 fetch쓰기 \n              \n              여기서는 axios 쓸거임*/}\n            <button className=\"btn btn-primary\" onClick={()=>{\n\n              axios.post('https://codingapple1.github.io/shop/data2.json', { id: 'joshua999995', pw: 1234})\n              .then((reuslt)=>{  })\n              .catch(()=>{  });\n\n\n\n              //axios.get(데이터 요청할 URL)\n              //.then()은 ajax 요청이 성공했을 시 실행시킴\n              //.catch()는 ajax 요청이 실패했을 시 실행시킴 \n              axios.get('https://codingapple1.github.io/shop/data2.json')\n              .then((result)=>{ \n                console.log('Axios Request 성공함');\n                console.log(result);\n                //result.data가 우리가 원하는 json 포맷의 데이터를 Object로 가져올 수 있음\n                //fetch로하면 json포맷이여서 key에 다 \"\" 가 붙어있지만 axios는 \"\" 없이 Object형으로 됌\n                console.log(result.data);\n\n\n                //...shoes는 shoes state의 엘리먼트들의 대괄호를 벗기라는 소리임\n                //고로 [...shoes]는 shoes state의 대괄호를 벗기고 고거를 다시 []안에 넣어서 독립적인 shoes 복사본을 만듬\n                //shoes랑 result.data의 자료를 다 합친 한개의 어레이를 만듦\n                shoesState([...shoes, ...result.data])\n               })\n              .catch(()=>{ \n                console.log('Axios Request 실패함');\n               });\n\n\n              //fetch로하면 json포맷이여서 key에 다 \"\" 가 붙어있지만 axios는 \"\" 없이 Object형으로 됌\n               fetch('https://codingapple1.github.io/shop/data2.json')\n               \n            }}>더보기</button>\n          \n          \n          \n          \n          \n          \n          </div>\n\n        </Route>\n\n\n        {/* 주소창에 localhost:3000/detail/(아무문자) 치면 가는 페이지 만듦 */}\n        <Route path=\"/detail/:id\">\n          <DetailPage shoes={shoes} 재고={재고} 재고변경={재고변경}/>\n        </Route>\n\n        {/* path=\"/:id\" 는 / 뒤에 어떤 문자가 오던간에 이 페이지로 이동해주세요 라는 의미임.\n        :id 는 url의 parameter라고 불림.\n        / 뒤에 어떤걸 쳐도 이 path로 가게됌 */}\n        <Route path=\"/:id\">\n          <div>아무거나 적었을때 이거 보여주셈</div>\n        </Route>\n\n      </Switch>\n      \n    </div>\n  );\n}\n\n\n\n\n\n\nfunction Card(props) {\n  return (\n    /* className=\"col-4\" 는 4개 column을 차지한는 div박스를 쓰겠다는 의미임\n          위에서 12개로 쪼갰기 때문에 한개당 4개씩 가지면 3등분 됌 \n          className=\"col-md-4\" 는 모바일 사이즈에서 세로로 정렬도 해줌.\n          모바일 사이즈에서 커지면 다시 가로로 정렬해줌*/\n    <div className=\"col-md-4\">\n      {/* src같은 html태그 안에서 바인딩 할때는 ()를 쓰는 듯 */}\n      <img src={ \"https://codingapple1.github.io/shop/shoes\" + (props.index + 1) + \".jpg\" }\n      width=\"100%\" />\n      <h4>{props.shoe.title}</h4>\n      <p>{props.shoe.content} & {props.shoe.price}</p>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n//Used React Router\n//HashRouter을 쓸경우 안전하게 라우팅 가능\n//HashRouter을 쓰면 localhost:3000/#/ 같이 #이 붙는데 # 뒤에 적는 것은 서버로 전달이 안됌\n//그래서 라우팅은 리액트가 알아서 잘 해줌\n//BrowserRouter을 쓸경우, 라우팅을 리액트가 아니라 서버에게 요청할 수도 있어서 위험함.\n//서버에서 서버 라우팅 방지하는 API를 작성해둬야함\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}